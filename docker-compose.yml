# docker-compose -f .\docker-compose.yml -p fiap-tech-challenge-2  up -d
---
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: dev-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: true
    depends_on:
      - "kafka"
    networks:
      - kafka-net

  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #provectuslabs/kafka-ui
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST_K8S://host.docker.internal:9092,PLAINTEXT_HOST_LOCAL://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST_K8S://0.0.0.0:9092,PLAINTEXT_HOST_LOCAL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST_K8S:PLAINTEXT,PLAINTEXT_HOST_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
    networks:
      - kafka-net

  create-topics:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: |
      bash -c "
        # Espera o Kafka estar pronto
        sleep 10;
        
        # Cria os tópicos
        kafka-topics --create --topic order-status-update --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 
        # && kafka-topics --create --topic meu-topico-2 --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092
      "
    networks:
      - kafka-net
  
  mssql:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    container_name: "sqlserver"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=SqlServer2019!
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
    networks:
      - kafka-net
    restart: always

  k6:
    image: grafana/k6
    depends_on:
      - kafka
      - mssql
      - create-topics
    volumes:
      - ./test/k6/load_test.js:/load_test.js
    command: ["run", /load_test.js]
    # environment:
      # KAFKA_BOOTSTRAP_SERVERS: "host.docker.internal:9092" # Exemplo de variável de ambiente
    networks:
      - kafka-net

volumes:
  mssql_data:

networks:
  kafka-net:
    driver: bridge